{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/alessioricci/projects/udemy/udemy-app/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CacheInterceptor = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst decorators_1 = require(\"../../decorators\");\n\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n\nconst cache_constants_1 = require(\"../cache.constants\");\n\nconst HTTP_ADAPTER_HOST = 'HttpAdapterHost';\nconst REFLECTOR = 'Reflector';\nlet CacheInterceptor = class CacheInterceptor {\n  constructor(cacheManager, reflector) {\n    this.cacheManager = cacheManager;\n    this.reflector = reflector;\n  }\n\n  intercept(context, next) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      const key = _this.trackBy(context);\n\n      const ttlValueOrFactory = (_a = _this.reflector.get(cache_constants_1.CACHE_TTL_METADATA, context.getHandler())) !== null && _a !== void 0 ? _a : null;\n\n      if (!key) {\n        return next.handle();\n      }\n\n      try {\n        const value = yield _this.cacheManager.get(key);\n\n        if (!shared_utils_1.isNil(value)) {\n          return rxjs_1.of(value);\n        }\n\n        const ttl = shared_utils_1.isFunction(ttlValueOrFactory) ? yield ttlValueOrFactory(context) : ttlValueOrFactory;\n        return next.handle().pipe(operators_1.tap(response => {\n          const args = shared_utils_1.isNil(ttl) ? [key, response] : [key, response, {\n            ttl\n          }];\n\n          _this.cacheManager.set(...args);\n        }));\n      } catch (_b) {\n        return next.handle();\n      }\n    })();\n  }\n\n  trackBy(context) {\n    const httpAdapter = this.httpAdapterHost.httpAdapter;\n    const isHttpApp = httpAdapter && !!httpAdapter.getRequestMethod;\n    const cacheMetadata = this.reflector.get(cache_constants_1.CACHE_KEY_METADATA, context.getHandler());\n\n    if (!isHttpApp || cacheMetadata) {\n      return cacheMetadata;\n    }\n\n    const request = context.getArgByIndex(0);\n\n    if (httpAdapter.getRequestMethod(request) !== 'GET') {\n      return undefined;\n    }\n\n    return httpAdapter.getRequestUrl(request);\n  }\n\n};\n\ntslib_1.__decorate([decorators_1.Optional(), decorators_1.Inject(HTTP_ADAPTER_HOST), tslib_1.__metadata(\"design:type\", Object)], CacheInterceptor.prototype, \"httpAdapterHost\", void 0);\n\nCacheInterceptor = tslib_1.__decorate([decorators_1.Injectable(), tslib_1.__param(0, decorators_1.Inject(cache_constants_1.CACHE_MANAGER)), tslib_1.__param(1, decorators_1.Inject(REFLECTOR)), tslib_1.__metadata(\"design:paramtypes\", [Object, Object])], CacheInterceptor);\nexports.CacheInterceptor = CacheInterceptor;","map":null,"metadata":{},"sourceType":"script"}
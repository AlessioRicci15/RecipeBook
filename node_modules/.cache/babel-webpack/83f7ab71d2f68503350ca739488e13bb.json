{"ast":null,"code":"import * as RecipeActions from '../shared/store/recipe.actions';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./data-storage.service\";\nimport * as i2 from \"./recipe.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@ngrx/effects\";\nexport let RecipesResolverService = /*#__PURE__*/(() => {\n  class RecipesResolverService {\n    constructor(dataStorageService, recipesService, store, actions$) {\n      this.dataStorageService = dataStorageService;\n      this.recipesService = recipesService;\n      this.store = store;\n      this.actions$ = actions$;\n    }\n\n    resolve(route, state) {\n      const recipes = this.recipesService.getRecipes();\n\n      if (recipes.length === 0) {\n        this.store.select('recipe').pipe(take(1), map(recipesState => {\n          return recipesState.recipes;\n        }), switchMap(recipes => {\n          if (recipes.length === 0) {\n            this.store.dispatch(new RecipeActions.FetchRecipes());\n            return this.actions$.pipe(ofType(RecipeActions.SET_RECIPES), take(1));\n          } else {\n            return of(recipes);\n          }\n        }));\n      }\n\n      return recipes;\n    }\n\n  }\n\n  RecipesResolverService.ɵfac = function RecipesResolverService_Factory(t) {\n    return new (t || RecipesResolverService)(i0.ɵɵinject(i1.DataStorageService), i0.ɵɵinject(i2.RecipeService), i0.ɵɵinject(i3.Store), i0.ɵɵinject(i4.Actions));\n  };\n\n  RecipesResolverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecipesResolverService,\n    factory: RecipesResolverService.ɵfac,\n    providedIn: 'root'\n  });\n  return RecipesResolverService;\n})();","map":null,"metadata":{},"sourceType":"module"}
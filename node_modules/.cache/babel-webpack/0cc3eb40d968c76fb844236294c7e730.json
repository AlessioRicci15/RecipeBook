{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/alessioricci/projects/udemy/udemy-app/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.callModuleBootstrapHook = void 0;\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst iterare_1 = require(\"iterare\");\n\nconst transient_instances_1 = require(\"../injector/helpers/transient-instances\");\n/**\n * Checks if the given instance has the `onApplicationBootstrap` function\n *\n * @param instance The instance which should be checked\n */\n\n\nfunction hasOnAppBootstrapHook(instance) {\n  return !shared_utils_1.isNil(instance.onApplicationBootstrap);\n}\n/**\n * Calls the given instances\n */\n\n\nfunction callOperator(instances) {\n  return iterare_1.iterate(instances).filter(instance => !shared_utils_1.isNil(instance)).filter(hasOnAppBootstrapHook).map( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (instance) {\n      return instance.onApplicationBootstrap();\n    });\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()).toArray();\n}\n/**\n * Calls the `onApplicationBootstrap` function on the module and its children\n * (providers / controllers).\n *\n * @param module The module which will be initialized\n */\n\n\nfunction callModuleBootstrapHook(_x2) {\n  return _callModuleBootstrapHook.apply(this, arguments);\n}\n\nfunction _callModuleBootstrapHook() {\n  _callModuleBootstrapHook = _asyncToGenerator(function* (module) {\n    const providers = module.getNonAliasProviders(); // Module (class) instance is the first element of the providers array\n    // Lifecycle hook has to be called once all classes are properly initialized\n\n    const [_, moduleClassHost] = providers.shift();\n    const instances = [...module.controllers, ...providers, ...module.injectables, ...module.middlewares];\n    const nonTransientInstances = transient_instances_1.getNonTransientInstances(instances);\n    yield Promise.all(callOperator(nonTransientInstances));\n    const transientInstances = transient_instances_1.getTransientInstances(instances);\n    yield Promise.all(callOperator(transientInstances)); // Call the instance itself\n\n    const moduleClassInstance = moduleClassHost.instance;\n\n    if (moduleClassInstance && hasOnAppBootstrapHook(moduleClassInstance) && moduleClassHost.isDependencyTreeStatic()) {\n      yield moduleClassInstance.onApplicationBootstrap();\n    }\n  });\n  return _callModuleBootstrapHook.apply(this, arguments);\n}\n\nexports.callModuleBootstrapHook = callModuleBootstrapHook;","map":null,"metadata":{},"sourceType":"script"}
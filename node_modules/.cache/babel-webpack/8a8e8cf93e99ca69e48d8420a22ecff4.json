{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/alessioricci/projects/udemy/udemy-app/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar CacheModule_1;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CacheModule = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst decorators_1 = require(\"../decorators\");\n\nconst cache_constants_1 = require(\"./cache.constants\");\n\nconst cache_providers_1 = require(\"./cache.providers\");\n/**\n * Module that provides Nest cache-manager.\n *\n * @see [Caching](https://docs.nestjs.com/techniques/caching)\n *\n * @publicApi\n */\n\n\nlet CacheModule = CacheModule_1 = class CacheModule {\n  /**\n   * Configure the cache manager statically.\n   *\n   * @param options options to configure the cache manager\n   *\n   * @see [Customize caching](https://docs.nestjs.com/techniques/caching#customize-caching)\n   */\n  static register(options = {}) {\n    return {\n      module: CacheModule_1,\n      providers: [{\n        provide: cache_constants_1.CACHE_MODULE_OPTIONS,\n        useValue: options\n      }]\n    };\n  }\n  /**\n   * Configure the cache manager dynamically.\n   *\n   * @param options method for dynamically supplying cache manager configuration\n   * options\n   *\n   * @see [Async configuration](https://docs.nestjs.com/techniques/caching#async-configuration)\n   */\n\n\n  static registerAsync(options) {\n    return {\n      module: CacheModule_1,\n      imports: options.imports,\n      providers: [...this.createAsyncProviders(options), ...(options.extraProviders || [])]\n    };\n  }\n\n  static createAsyncProviders(options) {\n    if (options.useExisting || options.useFactory) {\n      return [this.createAsyncOptionsProvider(options)];\n    }\n\n    return [this.createAsyncOptionsProvider(options), {\n      provide: options.useClass,\n      useClass: options.useClass\n    }];\n  }\n\n  static createAsyncOptionsProvider(options) {\n    if (options.useFactory) {\n      return {\n        provide: cache_constants_1.CACHE_MODULE_OPTIONS,\n        useFactory: options.useFactory,\n        inject: options.inject || []\n      };\n    }\n\n    return {\n      provide: cache_constants_1.CACHE_MODULE_OPTIONS,\n      useFactory: function () {\n        var _ref = _asyncToGenerator(function* (optionsFactory) {\n          return optionsFactory.createCacheOptions();\n        });\n\n        return function useFactory(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      inject: [options.useExisting || options.useClass]\n    };\n  }\n\n};\nCacheModule = CacheModule_1 = tslib_1.__decorate([decorators_1.Module({\n  providers: [cache_providers_1.createCacheManager()],\n  exports: [cache_constants_1.CACHE_MANAGER]\n})], CacheModule);\nexports.CacheModule = CacheModule;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Res = exports.Req = exports.HostParam = exports.Param = exports.Body = exports.Query = exports.Headers = exports.UploadedFiles = exports.UploadedFile = exports.Session = exports.Ip = exports.Next = exports.Response = exports.Request = exports.assignMetadata = void 0;\n\nconst constants_1 = require(\"../../constants\");\n\nconst route_paramtypes_enum_1 = require(\"../../enums/route-paramtypes.enum\");\n\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n\nfunction assignMetadata(args, paramtype, index, data, ...pipes) {\n  return Object.assign(Object.assign({}, args), {\n    [`${paramtype}:${index}`]: {\n      index,\n      data,\n      pipes\n    }\n  });\n}\n\nexports.assignMetadata = assignMetadata;\n\nfunction createRouteParamDecorator(paramtype) {\n  return data => (target, key, index) => {\n    const args = Reflect.getMetadata(constants_1.ROUTE_ARGS_METADATA, target.constructor, key) || {};\n    Reflect.defineMetadata(constants_1.ROUTE_ARGS_METADATA, assignMetadata(args, paramtype, index, data), target.constructor, key);\n  };\n}\n\nconst createPipesRouteParamDecorator = paramtype => (data, ...pipes) => (target, key, index) => {\n  const args = Reflect.getMetadata(constants_1.ROUTE_ARGS_METADATA, target.constructor, key) || {};\n  const hasParamData = shared_utils_1.isNil(data) || shared_utils_1.isString(data);\n  const paramData = hasParamData ? data : undefined;\n  const paramPipes = hasParamData ? pipes : [data, ...pipes];\n  Reflect.defineMetadata(constants_1.ROUTE_ARGS_METADATA, assignMetadata(args, paramtype, index, paramData, ...paramPipes), target.constructor, key);\n};\n/**\n * Route handler parameter decorator. Extracts the `Request`\n * object from the underlying platform and populates the decorated\n * parameter with the value of `Request`.\n *\n * Example: `logout(@Request() req)`\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\n\nexports.Request = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.REQUEST);\n/**\n * Route handler parameter decorator. Extracts the `Response`\n * object from the underlying platform and populates the decorated\n * parameter with the value of `Response`.\n *\n * Example: `logout(@Response() res)`\n *\n * @publicApi\n */\n\nconst Response = options => (target, key, index) => {\n  if (options === null || options === void 0 ? void 0 : options.passthrough) {\n    Reflect.defineMetadata(constants_1.RESPONSE_PASSTHROUGH_METADATA, options === null || options === void 0 ? void 0 : options.passthrough, target.constructor, key);\n  }\n\n  return createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.RESPONSE)()(target, key, index);\n};\n\nexports.Response = Response;\n/**\n * Route handler parameter decorator. Extracts reference to the `Next` function\n * from the underlying platform and populates the decorated\n * parameter with the value of `Next`.\n *\n * @publicApi\n */\n\nexports.Next = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.NEXT);\n/**\n * Route handler parameter decorator. Extracts the `Ip` property\n * from the `req` object and populates the decorated\n * parameter with the value of `ip`.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\nexports.Ip = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.IP);\n/**\n * Route handler parameter decorator. Extracts the `Session` object\n * from the underlying platform and populates the decorated\n * parameter with the value of `Session`.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\nexports.Session = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.SESSION);\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\n\nfunction UploadedFile(fileKey, ...pipes) {\n  return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.FILE)(fileKey, ...pipes);\n}\n\nexports.UploadedFile = UploadedFile;\n/**\n * Route handler parameter decorator. Extracts the `files` object\n * and populates the decorated parameter with the value of `files`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFiles() files) {\n *   console.log(files);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\n\nfunction UploadedFiles(...pipes) {\n  return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.FILES)(undefined, ...pipes);\n}\n\nexports.UploadedFiles = UploadedFiles;\n/**\n * Route handler parameter decorator. Extracts the `headers`\n * property from the `req` object and populates the decorated\n * parameter with the value of `headers`.\n *\n * For example: `async update(@Headers('Cache-Control') cacheControl: string)`\n *\n * @param property name of single header property to extract.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\nexports.Headers = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.HEADERS);\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\nfunction Query(property, ...pipes) {\n  return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.QUERY)(property, ...pipes);\n}\n\nexports.Query = Query;\n/**\n * Route handler parameter decorator. Extracts the entire `body` object\n * property, or optionally a named property of the `body` object, from\n * the `req` object and populates the decorated parameter with that value.\n * Also applies pipes to the bound body parameter.\n *\n * For example:\n * ```typescript\n * async create(@Body('role', new ValidationPipe()) role: string)\n * ```\n *\n * @param property name of single property to extract from the `body` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound body parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\n\nfunction Body(property, ...pipes) {\n  return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.BODY)(property, ...pipes);\n}\n\nexports.Body = Body;\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\n\nfunction Param(property, ...pipes) {\n  return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.PARAM)(property, ...pipes);\n}\n\nexports.Param = Param;\n/**\n * Route handler parameter decorator. Extracts the `hosts`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@HostParam() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@HostParam('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\nfunction HostParam(property) {\n  return createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.HOST)(property);\n}\n\nexports.HostParam = HostParam;\nexports.Req = exports.Request;\nexports.Res = exports.Response;","map":null,"metadata":{},"sourceType":"script"}
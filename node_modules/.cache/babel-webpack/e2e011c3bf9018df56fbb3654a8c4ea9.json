{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/alessioricci/projects/udemy/udemy-app/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NestContainer = void 0;\n\nconst constants_1 = require(\"@nestjs/common/constants\");\n\nconst circular_dependency_exception_1 = require(\"../errors/exceptions/circular-dependency.exception\");\n\nconst undefined_forwardref_exception_1 = require(\"../errors/exceptions/undefined-forwardref.exception\");\n\nconst unknown_module_exception_1 = require(\"../errors/exceptions/unknown-module.exception\");\n\nconst external_context_creator_1 = require(\"../helpers/external-context-creator\");\n\nconst http_adapter_host_1 = require(\"../helpers/http-adapter-host\");\n\nconst request_constants_1 = require(\"../router/request/request-constants\");\n\nconst compiler_1 = require(\"./compiler\");\n\nconst internal_core_module_1 = require(\"./internal-core-module\");\n\nconst internal_providers_storage_1 = require(\"./internal-providers-storage\");\n\nconst module_1 = require(\"./module\");\n\nconst module_token_factory_1 = require(\"./module-token-factory\");\n\nconst modules_container_1 = require(\"./modules-container\");\n\nclass NestContainer {\n  constructor(_applicationConfig = undefined) {\n    this._applicationConfig = _applicationConfig;\n    this.globalModules = new Set();\n    this.moduleTokenFactory = new module_token_factory_1.ModuleTokenFactory();\n    this.moduleCompiler = new compiler_1.ModuleCompiler(this.moduleTokenFactory);\n    this.modules = new modules_container_1.ModulesContainer();\n    this.dynamicModulesMetadata = new Map();\n    this.internalProvidersStorage = new internal_providers_storage_1.InternalProvidersStorage();\n  }\n\n  get applicationConfig() {\n    return this._applicationConfig;\n  }\n\n  setHttpAdapter(httpAdapter) {\n    this.internalProvidersStorage.httpAdapter = httpAdapter;\n\n    if (!this.internalProvidersStorage.httpAdapterHost) {\n      return;\n    }\n\n    const host = this.internalProvidersStorage.httpAdapterHost;\n    host.httpAdapter = httpAdapter;\n  }\n\n  getHttpAdapterRef() {\n    return this.internalProvidersStorage.httpAdapter;\n  }\n\n  addModule(metatype, scope) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // In DependenciesScanner#scanForModules we already check for undefined or invalid modules\n      // We still need to catch the edge-case of `forwardRef(() => undefined)`\n      if (!metatype) {\n        throw new undefined_forwardref_exception_1.UndefinedForwardRefException(scope);\n      }\n\n      const {\n        type,\n        dynamicMetadata,\n        token\n      } = yield _this.moduleCompiler.compile(metatype);\n\n      if (_this.modules.has(token)) {\n        return;\n      }\n\n      const moduleRef = new module_1.Module(type, _this);\n\n      _this.modules.set(token, moduleRef);\n\n      yield _this.addDynamicMetadata(token, dynamicMetadata, [].concat(scope, type));\n\n      if (_this.isGlobalModule(type, dynamicMetadata)) {\n        _this.addGlobalModule(moduleRef);\n      }\n\n      return moduleRef;\n    })();\n  }\n\n  addDynamicMetadata(token, dynamicModuleMetadata, scope) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!dynamicModuleMetadata) {\n        return;\n      }\n\n      _this2.dynamicModulesMetadata.set(token, dynamicModuleMetadata);\n\n      const {\n        imports\n      } = dynamicModuleMetadata;\n      yield _this2.addDynamicModules(imports, scope);\n    })();\n  }\n\n  addDynamicModules(modules, scope) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!modules) {\n        return;\n      }\n\n      yield Promise.all(modules.map(module => _this3.addModule(module, scope)));\n    })();\n  }\n\n  isGlobalModule(metatype, dynamicMetadata) {\n    if (dynamicMetadata && dynamicMetadata.global) {\n      return true;\n    }\n\n    return !!Reflect.getMetadata(constants_1.GLOBAL_MODULE_METADATA, metatype);\n  }\n\n  addGlobalModule(module) {\n    this.globalModules.add(module);\n  }\n\n  getModules() {\n    return this.modules;\n  }\n\n  getModuleByKey(moduleKey) {\n    return this.modules.get(moduleKey);\n  }\n\n  getInternalCoreModuleRef() {\n    return this.internalCoreModule;\n  }\n\n  addImport(relatedModule, token) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this4.modules.has(token)) {\n        return;\n      }\n\n      const moduleRef = _this4.modules.get(token);\n\n      const {\n        token: relatedModuleToken\n      } = yield _this4.moduleCompiler.compile(relatedModule);\n\n      const related = _this4.modules.get(relatedModuleToken);\n\n      moduleRef.addRelatedModule(related);\n    })();\n  }\n\n  addProvider(provider, token) {\n    if (!provider) {\n      throw new circular_dependency_exception_1.CircularDependencyException();\n    }\n\n    if (!this.modules.has(token)) {\n      throw new unknown_module_exception_1.UnknownModuleException();\n    }\n\n    const moduleRef = this.modules.get(token);\n    return moduleRef.addProvider(provider);\n  }\n\n  addInjectable(injectable, token, host) {\n    if (!this.modules.has(token)) {\n      throw new unknown_module_exception_1.UnknownModuleException();\n    }\n\n    const moduleRef = this.modules.get(token);\n    moduleRef.addInjectable(injectable, host);\n  }\n\n  addExportedProvider(provider, token) {\n    if (!this.modules.has(token)) {\n      throw new unknown_module_exception_1.UnknownModuleException();\n    }\n\n    const moduleRef = this.modules.get(token);\n    moduleRef.addExportedProvider(provider);\n  }\n\n  addController(controller, token) {\n    if (!this.modules.has(token)) {\n      throw new unknown_module_exception_1.UnknownModuleException();\n    }\n\n    const moduleRef = this.modules.get(token);\n    moduleRef.addController(controller);\n  }\n\n  clear() {\n    this.modules.clear();\n  }\n\n  replace(toReplace, options) {\n    this.modules.forEach(moduleRef => moduleRef.replace(toReplace, options));\n  }\n\n  bindGlobalScope() {\n    this.modules.forEach(moduleRef => this.bindGlobalsToImports(moduleRef));\n  }\n\n  bindGlobalsToImports(moduleRef) {\n    this.globalModules.forEach(globalModule => this.bindGlobalModuleToModule(moduleRef, globalModule));\n  }\n\n  bindGlobalModuleToModule(target, globalModule) {\n    if (target === globalModule || target === this.internalCoreModule) {\n      return;\n    }\n\n    target.addRelatedModule(globalModule);\n  }\n\n  getDynamicMetadataByToken(token, metadataKey) {\n    const metadata = this.dynamicModulesMetadata.get(token);\n\n    if (metadata && metadata[metadataKey]) {\n      return metadata[metadataKey];\n    }\n\n    return [];\n  }\n\n  createCoreModule() {\n    return internal_core_module_1.InternalCoreModule.register([{\n      provide: external_context_creator_1.ExternalContextCreator,\n      useValue: external_context_creator_1.ExternalContextCreator.fromContainer(this)\n    }, {\n      provide: modules_container_1.ModulesContainer,\n      useValue: this.modules\n    }, {\n      provide: http_adapter_host_1.HttpAdapterHost,\n      useValue: this.internalProvidersStorage.httpAdapterHost\n    }]);\n  }\n\n  registerCoreModuleRef(moduleRef) {\n    this.internalCoreModule = moduleRef;\n    this.modules[internal_core_module_1.InternalCoreModule.name] = moduleRef;\n  }\n\n  getModuleTokenFactory() {\n    return this.moduleTokenFactory;\n  }\n\n  registerRequestProvider(request, contextId) {\n    const wrapper = this.internalCoreModule.getProviderByKey(request_constants_1.REQUEST);\n    wrapper.setInstanceByContextId(contextId, {\n      instance: request,\n      isResolved: true\n    });\n  }\n\n}\n\nexports.NestContainer = NestContainer;","map":null,"metadata":{},"sourceType":"script"}
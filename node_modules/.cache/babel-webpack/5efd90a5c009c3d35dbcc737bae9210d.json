{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/alessioricci/projects/udemy/udemy-app/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NestApplication = void 0;\n\nconst logger_service_1 = require(\"@nestjs/common/services/logger.service\");\n\nconst load_package_util_1 = require(\"@nestjs/common/utils/load-package.util\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst iterare_1 = require(\"iterare\");\n\nconst os_1 = require(\"os\");\n\nconst application_config_1 = require(\"./application-config\");\n\nconst constants_1 = require(\"./constants\");\n\nconst optional_require_1 = require(\"./helpers/optional-require\");\n\nconst container_1 = require(\"./middleware/container\");\n\nconst middleware_module_1 = require(\"./middleware/middleware-module\");\n\nconst nest_application_context_1 = require(\"./nest-application-context\");\n\nconst routes_resolver_1 = require(\"./router/routes-resolver\");\n\nconst {\n  SocketModule\n} = optional_require_1.optionalRequire('@nestjs/websockets/socket-module', () => require('@nestjs/websockets/socket-module'));\nconst {\n  MicroservicesModule\n} = optional_require_1.optionalRequire('@nestjs/microservices/microservices-module', () => require('@nestjs/microservices/microservices-module'));\n/**\n * @publicApi\n */\n\nclass NestApplication extends nest_application_context_1.NestApplicationContext {\n  constructor(container, httpAdapter, config, appOptions = {}) {\n    super(container);\n    this.httpAdapter = httpAdapter;\n    this.config = config;\n    this.appOptions = appOptions;\n    this.logger = new logger_service_1.Logger(NestApplication.name, true);\n    this.middlewareModule = new middleware_module_1.MiddlewareModule();\n    this.middlewareContainer = new container_1.MiddlewareContainer(this.container);\n    this.microservicesModule = MicroservicesModule && new MicroservicesModule();\n    this.socketModule = SocketModule && new SocketModule();\n    this.microservices = [];\n    this.isListening = false;\n    this.selectContextModule();\n    this.registerHttpServer();\n    this.routesResolver = new routes_resolver_1.RoutesResolver(this.container, this.config, this.injector);\n  }\n\n  dispose() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.socketModule && (yield _this.socketModule.close());\n      _this.microservicesModule && (yield _this.microservicesModule.close());\n      _this.httpAdapter && (yield _this.httpAdapter.close());\n      yield Promise.all(iterare_1.iterate(_this.microservices).map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (microservice) {\n          microservice.setIsTerminated(true);\n          yield microservice.close();\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n    })();\n  }\n\n  getHttpAdapter() {\n    return this.httpAdapter;\n  }\n\n  registerHttpServer() {\n    this.httpServer = this.createServer();\n  }\n\n  getUnderlyingHttpServer() {\n    return this.httpAdapter.getHttpServer();\n  }\n\n  applyOptions() {\n    if (!this.appOptions || !this.appOptions.cors) {\n      return undefined;\n    }\n\n    const passCustomOptions = shared_utils_1.isObject(this.appOptions.cors) || typeof this.appOptions.cors === 'function';\n\n    if (!passCustomOptions) {\n      return this.enableCors();\n    }\n\n    return this.enableCors(this.appOptions.cors);\n  }\n\n  createServer() {\n    this.httpAdapter.initHttpServer(this.appOptions);\n    return this.httpAdapter.getHttpServer();\n  }\n\n  registerModules() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.registerWsModule();\n\n      if (_this2.microservicesModule) {\n        _this2.microservicesModule.register(_this2.container, _this2.config);\n\n        _this2.microservicesModule.setupClients(_this2.container);\n      }\n\n      yield _this2.middlewareModule.register(_this2.middlewareContainer, _this2.container, _this2.config, _this2.injector, _this2.httpAdapter);\n    })();\n  }\n\n  registerWsModule() {\n    if (!this.socketModule) {\n      return;\n    }\n\n    this.socketModule.register(this.container, this.config, this.httpServer);\n  }\n\n  init() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      _this3.applyOptions();\n\n      yield (_a = _this3.httpAdapter) === null || _a === void 0 ? void 0 : _a.init();\n      const useBodyParser = _this3.appOptions && _this3.appOptions.bodyParser !== false;\n      useBodyParser && _this3.registerParserMiddleware();\n      yield _this3.registerModules();\n      yield _this3.registerRouter();\n      yield _this3.callInitHook();\n      yield _this3.registerRouterHooks();\n      yield _this3.callBootstrapHook();\n      _this3.isInitialized = true;\n\n      _this3.logger.log(constants_1.MESSAGES.APPLICATION_READY);\n\n      return _this3;\n    })();\n  }\n\n  registerParserMiddleware() {\n    this.httpAdapter.registerParserMiddleware();\n  }\n\n  registerRouter() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this4.registerMiddleware(_this4.httpAdapter);\n\n      const prefix = _this4.config.getGlobalPrefix();\n\n      const basePath = shared_utils_1.addLeadingSlash(prefix);\n\n      _this4.routesResolver.resolve(_this4.httpAdapter, basePath);\n    })();\n  }\n\n  registerRouterHooks() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.routesResolver.registerNotFoundHandler();\n\n      _this5.routesResolver.registerExceptionHandler();\n    })();\n  }\n\n  connectMicroservice(microserviceOptions, hybridAppOptions = {}) {\n    const {\n      NestMicroservice\n    } = load_package_util_1.loadPackage('@nestjs/microservices', 'NestFactory', () => require('@nestjs/microservices'));\n    const {\n      inheritAppConfig\n    } = hybridAppOptions;\n    const applicationConfig = inheritAppConfig ? this.config : new application_config_1.ApplicationConfig();\n    const instance = new NestMicroservice(this.container, microserviceOptions, applicationConfig);\n    instance.registerListeners();\n    instance.setIsInitialized(true);\n    instance.setIsInitHookCalled(true);\n    this.microservices.push(instance);\n    return instance;\n  }\n\n  getMicroservices() {\n    return this.microservices;\n  }\n\n  getHttpServer() {\n    return this.httpServer;\n  }\n\n  startAllMicroservices(callback) {\n    Promise.all(this.microservices.map(this.listenToPromise)).then(() => callback && callback());\n    return this;\n  }\n\n  startAllMicroservicesAsync() {\n    return new Promise(resolve => this.startAllMicroservices(resolve));\n  }\n\n  use(...args) {\n    this.httpAdapter.use(...args);\n    return this;\n  }\n\n  enableCors(options) {\n    this.httpAdapter.enableCors(options);\n  }\n\n  listen(port, ...args) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      !_this6.isInitialized && (yield _this6.init());\n      _this6.isListening = true;\n\n      _this6.httpAdapter.listen(port, ...args);\n\n      return _this6.httpServer;\n    })();\n  }\n\n  listenAsync(port, hostname) {\n    return new Promise(resolve => {\n      const server = this.listen(port, hostname, () => resolve(server));\n    });\n  }\n\n  getUrl() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        if (!_this7.isListening) {\n          _this7.logger.error(constants_1.MESSAGES.CALL_LISTEN_FIRST);\n\n          reject(constants_1.MESSAGES.CALL_LISTEN_FIRST);\n        }\n\n        _this7.httpServer.on('listening', () => {\n          const address = _this7.httpServer.address();\n\n          if (typeof address === 'string') {\n            if (os_1.platform() === 'win32') {\n              return address;\n            }\n\n            const basePath = encodeURIComponent(address);\n            return `${_this7.getProtocol()}+unix://${basePath}`;\n          }\n\n          let host = _this7.host();\n\n          if (address && address.family === 'IPv6') {\n            if (host === '::') {\n              host = '[::1]';\n            } else {\n              host = `[${host}]`;\n            }\n          } else if (host === '0.0.0.0') {\n            host = '127.0.0.1';\n          }\n\n          resolve(`${_this7.getProtocol()}://${host}:${address.port}`);\n        });\n      });\n    })();\n  }\n\n  setGlobalPrefix(prefix) {\n    this.config.setGlobalPrefix(prefix);\n    return this;\n  }\n\n  useWebSocketAdapter(adapter) {\n    this.config.setIoAdapter(adapter);\n    return this;\n  }\n\n  useGlobalFilters(...filters) {\n    this.config.useGlobalFilters(...filters);\n    return this;\n  }\n\n  useGlobalPipes(...pipes) {\n    this.config.useGlobalPipes(...pipes);\n    return this;\n  }\n\n  useGlobalInterceptors(...interceptors) {\n    this.config.useGlobalInterceptors(...interceptors);\n    return this;\n  }\n\n  useGlobalGuards(...guards) {\n    this.config.useGlobalGuards(...guards);\n    return this;\n  }\n\n  useStaticAssets(pathOrOptions, options) {\n    this.httpAdapter.useStaticAssets && this.httpAdapter.useStaticAssets(pathOrOptions, options);\n    return this;\n  }\n\n  setBaseViewsDir(path) {\n    this.httpAdapter.setBaseViewsDir && this.httpAdapter.setBaseViewsDir(path);\n    return this;\n  }\n\n  setViewEngine(engineOrOptions) {\n    this.httpAdapter.setViewEngine && this.httpAdapter.setViewEngine(engineOrOptions);\n    return this;\n  }\n\n  host() {\n    const address = this.httpServer.address();\n\n    if (typeof address === 'string') {\n      return undefined;\n    }\n\n    return address && address.address;\n  }\n\n  getProtocol() {\n    return this.appOptions && this.appOptions.httpsOptions ? 'https' : 'http';\n  }\n\n  registerMiddleware(instance) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this8.middlewareModule.registerMiddleware(_this8.middlewareContainer, instance);\n    })();\n  }\n\n  listenToPromise(microservice) {\n    return new Promise( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (resolve) {\n        yield microservice.listen(resolve);\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n\n}\n\nexports.NestApplication = NestApplication;","map":null,"metadata":{},"sourceType":"script"}
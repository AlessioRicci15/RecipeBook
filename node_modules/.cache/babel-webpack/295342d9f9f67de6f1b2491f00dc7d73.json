{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/alessioricci/projects/udemy/udemy-app/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InterceptorsConsumer = void 0;\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst execution_context_host_1 = require(\"../helpers/execution-context-host\");\n\nclass InterceptorsConsumer {\n  intercept(interceptors, args, instance, callback, next, type) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (shared_utils_1.isEmpty(interceptors)) {\n        return next();\n      }\n\n      const context = _this.createContext(args, instance, callback);\n\n      context.setType(type);\n      const start$ = rxjs_1.defer(() => _this.transformDeffered(next));\n\n      const nextFn = (i = 0) => /*#__PURE__*/_asyncToGenerator(function* () {\n        if (i >= interceptors.length) {\n          return start$;\n        }\n\n        const handler = {\n          handle: () => rxjs_1.from(nextFn(i + 1)()).pipe(operators_1.mergeAll())\n        };\n        return interceptors[i].intercept(context, handler);\n      });\n\n      return nextFn()();\n    })();\n  }\n\n  createContext(args, instance, callback) {\n    return new execution_context_host_1.ExecutionContextHost(args, instance.constructor, callback);\n  }\n\n  transformDeffered(next) {\n    return rxjs_1.from(next()).pipe(operators_1.switchMap(res => {\n      const isDeffered = res instanceof Promise || res instanceof rxjs_1.Observable;\n      return isDeffered ? res : Promise.resolve(res);\n    }));\n  }\n\n}\n\nexports.InterceptorsConsumer = InterceptorsConsumer;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/alessioricci/projects/udemy/udemy-app/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExternalContextCreator = void 0;\n\nconst common_1 = require(\"@nestjs/common\");\n\nconst constants_1 = require(\"@nestjs/common/constants\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst external_exception_filter_context_1 = require(\"../exceptions/external-exception-filter-context\");\n\nconst constants_2 = require(\"../guards/constants\");\n\nconst guards_consumer_1 = require(\"../guards/guards-consumer\");\n\nconst guards_context_creator_1 = require(\"../guards/guards-context-creator\");\n\nconst constants_3 = require(\"../injector/constants\");\n\nconst interceptors_consumer_1 = require(\"../interceptors/interceptors-consumer\");\n\nconst interceptors_context_creator_1 = require(\"../interceptors/interceptors-context-creator\");\n\nconst pipes_consumer_1 = require(\"../pipes/pipes-consumer\");\n\nconst pipes_context_creator_1 = require(\"../pipes/pipes-context-creator\");\n\nconst context_utils_1 = require(\"./context-utils\");\n\nconst external_proxy_1 = require(\"./external-proxy\");\n\nconst handler_metadata_storage_1 = require(\"./handler-metadata-storage\");\n\nclass ExternalContextCreator {\n  constructor(guardsContextCreator, guardsConsumer, interceptorsContextCreator, interceptorsConsumer, modulesContainer, pipesContextCreator, pipesConsumer, filtersContextCreator) {\n    this.guardsContextCreator = guardsContextCreator;\n    this.guardsConsumer = guardsConsumer;\n    this.interceptorsContextCreator = interceptorsContextCreator;\n    this.interceptorsConsumer = interceptorsConsumer;\n    this.modulesContainer = modulesContainer;\n    this.pipesContextCreator = pipesContextCreator;\n    this.pipesConsumer = pipesConsumer;\n    this.filtersContextCreator = filtersContextCreator;\n    this.contextUtils = new context_utils_1.ContextUtils();\n    this.externalErrorProxy = new external_proxy_1.ExternalErrorProxy();\n    this.handlerMetadataStorage = new handler_metadata_storage_1.HandlerMetadataStorage();\n  }\n\n  static fromContainer(container) {\n    const guardsContextCreator = new guards_context_creator_1.GuardsContextCreator(container, container.applicationConfig);\n    const guardsConsumer = new guards_consumer_1.GuardsConsumer();\n    const interceptorsContextCreator = new interceptors_context_creator_1.InterceptorsContextCreator(container, container.applicationConfig);\n    const interceptorsConsumer = new interceptors_consumer_1.InterceptorsConsumer();\n    const pipesContextCreator = new pipes_context_creator_1.PipesContextCreator(container, container.applicationConfig);\n    const pipesConsumer = new pipes_consumer_1.PipesConsumer();\n    const filtersContextCreator = new external_exception_filter_context_1.ExternalExceptionFilterContext(container, container.applicationConfig);\n    const externalContextCreator = new ExternalContextCreator(guardsContextCreator, guardsConsumer, interceptorsContextCreator, interceptorsConsumer, container.getModules(), pipesContextCreator, pipesConsumer, filtersContextCreator);\n    externalContextCreator.container = container;\n    return externalContextCreator;\n  }\n\n  create(instance, callback, methodName, metadataKey, paramsFactory, contextId = constants_3.STATIC_CONTEXT, inquirerId, options = {\n    interceptors: true,\n    guards: true,\n    filters: true\n  }, contextType = 'http') {\n    var _this = this;\n\n    const module = this.getContextModuleName(instance.constructor);\n    const {\n      argsLength,\n      paramtypes,\n      getParamsMetadata\n    } = this.getMetadata(instance, methodName, metadataKey, paramsFactory, contextType);\n    const pipes = this.pipesContextCreator.create(instance, callback, module, contextId, inquirerId);\n    const guards = this.guardsContextCreator.create(instance, callback, module, contextId, inquirerId);\n    const exceptionFilter = this.filtersContextCreator.create(instance, callback, module, contextId, inquirerId);\n    const interceptors = options.interceptors ? this.interceptorsContextCreator.create(instance, callback, module, contextId, inquirerId) : [];\n    const paramsMetadata = getParamsMetadata(module, contextId, inquirerId);\n    const paramsOptions = paramsMetadata ? this.contextUtils.mergeParamsMetatypes(paramsMetadata, paramtypes) : [];\n    const fnCanActivate = options.guards ? this.createGuardsFn(guards, instance, callback, contextType) : null;\n    const fnApplyPipes = this.createPipesFn(pipes, paramsOptions);\n\n    const handler = (initialArgs, ...args) => /*#__PURE__*/_asyncToGenerator(function* () {\n      if (fnApplyPipes) {\n        yield fnApplyPipes(initialArgs, ...args);\n        return callback.apply(instance, initialArgs);\n      }\n\n      return callback.apply(instance, args);\n    });\n\n    const target = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (...args) {\n        const initialArgs = _this.contextUtils.createNullArray(argsLength);\n\n        fnCanActivate && (yield fnCanActivate(args));\n        const result = yield _this.interceptorsConsumer.intercept(interceptors, args, instance, callback, handler(initialArgs, ...args), contextType);\n        return _this.transformToResult(result);\n      });\n\n      return function target() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return options.filters ? this.externalErrorProxy.createProxy(target, exceptionFilter, contextType) : target;\n  }\n\n  getMetadata(instance, methodName, metadataKey, paramsFactory, contextType) {\n    const cacheMetadata = this.handlerMetadataStorage.get(instance, methodName);\n\n    if (cacheMetadata) {\n      return cacheMetadata;\n    }\n\n    const metadata = this.contextUtils.reflectCallbackMetadata(instance, methodName, metadataKey || '') || {};\n    const keys = Object.keys(metadata);\n    const argsLength = this.contextUtils.getArgumentsLength(keys, metadata);\n    const paramtypes = this.contextUtils.reflectCallbackParamtypes(instance, methodName);\n    const contextFactory = this.contextUtils.getContextFactory(contextType, instance, instance[methodName]);\n\n    const getParamsMetadata = (moduleKey, contextId = constants_3.STATIC_CONTEXT, inquirerId) => paramsFactory ? this.exchangeKeysForValues(keys, metadata, moduleKey, paramsFactory, contextId, inquirerId, contextFactory) : null;\n\n    const handlerMetadata = {\n      argsLength,\n      paramtypes,\n      getParamsMetadata\n    };\n    this.handlerMetadataStorage.set(instance, methodName, handlerMetadata);\n    return handlerMetadata;\n  }\n\n  getContextModuleName(constructor) {\n    const defaultModuleName = '';\n    const className = constructor.name;\n\n    if (!className) {\n      return defaultModuleName;\n    }\n\n    for (const [key, module] of [...this.modulesContainer.entries()]) {\n      if (this.getProviderByClassName(module, className)) {\n        return key;\n      }\n    }\n\n    return defaultModuleName;\n  }\n\n  getProviderByClassName(module, className) {\n    const {\n      providers\n    } = module;\n    const hasProvider = [...providers.keys()].some(provider => provider === className);\n    return hasProvider;\n  }\n\n  exchangeKeysForValues(keys, metadata, moduleContext, paramsFactory, contextId = constants_3.STATIC_CONTEXT, inquirerId, contextFactory = this.contextUtils.getContextFactory('http')) {\n    this.pipesContextCreator.setModuleContext(moduleContext);\n    return keys.map(key => {\n      const {\n        index,\n        data,\n        pipes: pipesCollection\n      } = metadata[key];\n      const pipes = this.pipesContextCreator.createConcreteContext(pipesCollection, contextId, inquirerId);\n      const type = this.contextUtils.mapParamType(key);\n\n      if (key.includes(constants_1.CUSTOM_ROUTE_AGRS_METADATA)) {\n        const {\n          factory\n        } = metadata[key];\n        const customExtractValue = this.contextUtils.getCustomFactory(factory, data, contextFactory);\n        return {\n          index,\n          extractValue: customExtractValue,\n          type,\n          data,\n          pipes\n        };\n      }\n\n      const numericType = Number(type);\n\n      const extractValue = (...args) => paramsFactory.exchangeKeyForValue(numericType, data, args);\n\n      return {\n        index,\n        extractValue,\n        type: numericType,\n        data,\n        pipes\n      };\n    });\n  }\n\n  createPipesFn(pipes, paramsOptions) {\n    var _this2 = this;\n\n    const pipesFn = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (args, ...params) {\n        const resolveParamValue = /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator(function* (param) {\n            const {\n              index,\n              extractValue,\n              type,\n              data,\n              metatype,\n              pipes: paramPipes\n            } = param;\n            const value = extractValue(...params);\n            args[index] = yield _this2.getParamValue(value, {\n              metatype,\n              type,\n              data\n            }, pipes.concat(paramPipes));\n          });\n\n          return function resolveParamValue(_x2) {\n            return _ref4.apply(this, arguments);\n          };\n        }();\n\n        yield Promise.all(paramsOptions.map(resolveParamValue));\n      });\n\n      return function pipesFn(_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    return paramsOptions.length ? pipesFn : null;\n  }\n\n  getParamValue(value, {\n    metatype,\n    type,\n    data\n  }, pipes) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return shared_utils_1.isEmpty(pipes) ? value : _this3.pipesConsumer.apply(value, {\n        metatype,\n        type,\n        data\n      }, pipes);\n    })();\n  }\n\n  transformToResult(resultOrDeffered) {\n    return _asyncToGenerator(function* () {\n      if (resultOrDeffered && shared_utils_1.isFunction(resultOrDeffered.subscribe)) {\n        return resultOrDeffered.toPromise();\n      }\n\n      return resultOrDeffered;\n    })();\n  }\n\n  createGuardsFn(guards, instance, callback, contextType) {\n    var _this4 = this;\n\n    const canActivateFn = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (args) {\n        const canActivate = yield _this4.guardsConsumer.tryActivate(guards, args, instance, callback, contextType);\n\n        if (!canActivate) {\n          throw new common_1.ForbiddenException(constants_2.FORBIDDEN_MESSAGE);\n        }\n      });\n\n      return function canActivateFn(_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    return guards.length ? canActivateFn : null;\n  }\n\n  registerRequestProvider(request, contextId) {\n    this.container.registerRequestProvider(request, contextId);\n  }\n\n}\n\nexports.ExternalContextCreator = ExternalContextCreator;","map":null,"metadata":{},"sourceType":"script"}
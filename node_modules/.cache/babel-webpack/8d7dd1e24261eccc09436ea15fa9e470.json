{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/alessioricci/projects/udemy/udemy-app/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MiddlewareModule = void 0;\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst invalid_middleware_exception_1 = require(\"../errors/exceptions/invalid-middleware.exception\");\n\nconst runtime_exception_1 = require(\"../errors/exceptions/runtime.exception\");\n\nconst context_id_factory_1 = require(\"../helpers/context-id-factory\");\n\nconst execution_context_host_1 = require(\"../helpers/execution-context-host\");\n\nconst constants_1 = require(\"../injector/constants\");\n\nconst request_constants_1 = require(\"../router/request/request-constants\");\n\nconst router_exception_filters_1 = require(\"../router/router-exception-filters\");\n\nconst router_proxy_1 = require(\"../router/router-proxy\");\n\nconst builder_1 = require(\"./builder\");\n\nconst resolver_1 = require(\"./resolver\");\n\nconst routes_mapper_1 = require(\"./routes-mapper\");\n\nclass MiddlewareModule {\n  constructor() {\n    this.routerProxy = new router_proxy_1.RouterProxy();\n    this.exceptionFiltersCache = new WeakMap();\n  }\n\n  register(middlewareContainer, container, config, injector, httpAdapter) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const appRef = container.getHttpAdapterRef();\n      _this.routerExceptionFilter = new router_exception_filters_1.RouterExceptionFilters(container, config, appRef);\n      _this.routesMapper = new routes_mapper_1.RoutesMapper(container);\n      _this.resolver = new resolver_1.MiddlewareResolver(middlewareContainer);\n      _this.config = config;\n      _this.injector = injector;\n      _this.container = container;\n      _this.httpAdapter = httpAdapter;\n      const modules = container.getModules();\n      yield _this.resolveMiddleware(middlewareContainer, modules);\n    })();\n  }\n\n  resolveMiddleware(middlewareContainer, modules) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const moduleEntries = [...modules.entries()];\n\n      const loadMiddlewareConfiguration = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* ([name, module]) {\n          const instance = module.instance;\n          yield _this2.loadConfiguration(middlewareContainer, instance, name);\n          yield _this2.resolver.resolveInstances(module, name);\n        });\n\n        return function loadMiddlewareConfiguration(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      yield Promise.all(moduleEntries.map(loadMiddlewareConfiguration));\n    })();\n  }\n\n  loadConfiguration(middlewareContainer, instance, moduleKey) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!instance.configure) {\n        return;\n      }\n\n      const middlewareBuilder = new builder_1.MiddlewareBuilder(_this3.routesMapper, _this3.httpAdapter);\n      yield instance.configure(middlewareBuilder);\n\n      if (!(middlewareBuilder instanceof builder_1.MiddlewareBuilder)) {\n        return;\n      }\n\n      const config = middlewareBuilder.build();\n      middlewareContainer.insertConfig(config, moduleKey);\n    })();\n  }\n\n  registerMiddleware(middlewareContainer, applicationRef) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const configs = middlewareContainer.getConfigurations();\n\n      const registerAllConfigs = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (moduleKey, middlewareConfig) {\n          for (const config of middlewareConfig) {\n            yield _this4.registerMiddlewareConfig(middlewareContainer, config, moduleKey, applicationRef);\n          }\n        });\n\n        return function registerAllConfigs(_x2, _x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      const entriesSortedByDistance = [...configs.entries()].sort(([moduleA], [moduleB]) => {\n        return _this4.container.getModuleByKey(moduleA).distance - _this4.container.getModuleByKey(moduleB).distance;\n      });\n\n      for (const [moduleRef, moduleConfigurations] of entriesSortedByDistance) {\n        yield registerAllConfigs(moduleRef, [...moduleConfigurations]);\n      }\n    })();\n  }\n\n  registerMiddlewareConfig(middlewareContainer, config, moduleKey, applicationRef) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        forRoutes\n      } = config;\n\n      for (const routeInfo of forRoutes) {\n        yield _this5.registerRouteMiddleware(middlewareContainer, routeInfo, config, moduleKey, applicationRef);\n      }\n    })();\n  }\n\n  registerRouteMiddleware(middlewareContainer, routeInfo, config, moduleKey, applicationRef) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const middlewareCollection = [].concat(config.middleware);\n\n      const moduleRef = _this6.container.getModuleByKey(moduleKey);\n\n      for (const metatype of middlewareCollection) {\n        const collection = middlewareContainer.getMiddlewareCollection(moduleKey);\n        const instanceWrapper = collection.get(metatype.name);\n\n        if (shared_utils_1.isUndefined(instanceWrapper)) {\n          throw new runtime_exception_1.RuntimeException();\n        }\n\n        if (instanceWrapper.isTransient) {\n          return;\n        }\n\n        yield _this6.bindHandler(instanceWrapper, applicationRef, routeInfo.method, routeInfo.path, moduleRef, collection);\n      }\n    })();\n  }\n\n  bindHandler(wrapper, applicationRef, method, path, moduleRef, collection) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        instance,\n        metatype\n      } = wrapper;\n\n      if (shared_utils_1.isUndefined(instance.use)) {\n        throw new invalid_middleware_exception_1.InvalidMiddlewareException(metatype.name);\n      }\n\n      const router = yield applicationRef.createMiddlewareFactory(method);\n      const isStatic = wrapper.isDependencyTreeStatic();\n\n      if (isStatic) {\n        const proxy = yield _this7.createProxy(instance);\n        return _this7.registerHandler(router, path, proxy);\n      }\n\n      _this7.registerHandler(router, path, /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (req, res, next) {\n          try {\n            const contextId = context_id_factory_1.ContextIdFactory.getByRequest(req);\n\n            if (!req[request_constants_1.REQUEST_CONTEXT_ID]) {\n              Object.defineProperty(req, request_constants_1.REQUEST_CONTEXT_ID, {\n                value: contextId,\n                enumerable: false,\n                writable: false,\n                configurable: false\n              });\n\n              _this7.container.registerRequestProvider(req, contextId);\n            }\n\n            const contextInstance = yield _this7.injector.loadPerContext(instance, moduleRef, collection, contextId);\n            const proxy = yield _this7.createProxy(contextInstance, contextId);\n            return proxy(req, res, next);\n          } catch (err) {\n            let exceptionsHandler = _this7.exceptionFiltersCache.get(instance.use);\n\n            if (!exceptionsHandler) {\n              exceptionsHandler = _this7.routerExceptionFilter.create(instance, instance.use, undefined);\n\n              _this7.exceptionFiltersCache.set(instance.use, exceptionsHandler);\n            }\n\n            const host = new execution_context_host_1.ExecutionContextHost([req, res, next]);\n            exceptionsHandler.next(err, host);\n          }\n        });\n\n        return function (_x4, _x5, _x6) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n  createProxy(instance, contextId = constants_1.STATIC_CONTEXT) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const exceptionsHandler = _this8.routerExceptionFilter.create(instance, instance.use, undefined, contextId);\n\n      const middleware = instance.use.bind(instance);\n      return _this8.routerProxy.createProxy(middleware, exceptionsHandler);\n    })();\n  }\n\n  registerHandler(router, path, proxy) {\n    const prefix = this.config.getGlobalPrefix();\n    const basePath = shared_utils_1.addLeadingSlash(prefix);\n\n    if (basePath && path === '/*') {\n      // strip slash when a wildcard is being used\n      // and global prefix has been set\n      path = '*';\n    }\n\n    router(basePath + path, proxy);\n  }\n\n}\n\nexports.MiddlewareModule = MiddlewareModule;","map":null,"metadata":{},"sourceType":"script"}
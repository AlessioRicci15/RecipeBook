{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ValidationTypes_1 = require(\"../validation/ValidationTypes\");\n\nvar ValidationMetadata_1 = require(\"../metadata/ValidationMetadata\");\n\nvar ConstraintMetadata_1 = require(\"../metadata/ConstraintMetadata\");\n\nvar container_1 = require(\"../container\");\n\nvar MetadataStorage_1 = require(\"../metadata/MetadataStorage\"); // -------------------------------------------------------------------------\n// System\n// -------------------------------------------------------------------------\n\n/**\n * Registers custom validator class.\n */\n\n\nfunction ValidatorConstraint(options) {\n  return function (target) {\n    var isAsync = options && options.async ? true : false;\n    var name = options && options.name ? options.name : \"\";\n\n    if (!name) {\n      name = target.name;\n      if (!name) // generate name if it was not given\n        name = name.replace(/\\.?([A-Z]+)/g, function (x, y) {\n          return \"_\" + y.toLowerCase();\n        }).replace(/^_/, \"\");\n    }\n\n    var metadata = new ConstraintMetadata_1.ConstraintMetadata(target, name, isAsync);\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addConstraintMetadata(metadata);\n  };\n}\n\nexports.ValidatorConstraint = ValidatorConstraint;\n\nfunction Validate(constraintClass, constraintsOrValidationOptions, maybeValidationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.CUSTOM_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraintCls: constraintClass,\n      constraints: constraintsOrValidationOptions instanceof Array ? constraintsOrValidationOptions : undefined,\n      validationOptions: !(constraintsOrValidationOptions instanceof Array) ? constraintsOrValidationOptions : maybeValidationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.Validate = Validate;\n/**\n * Objects / object arrays marked with this decorator will also be validated.\n */\n\nfunction ValidateNested(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.NESTED_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.ValidateNested = ValidateNested;\n/**\n * If object has both allowed and not allowed properties a validation error will be thrown.\n */\n\nfunction Allow(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.WHITELIST,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.Allow = Allow;\n/**\n * Objects / object arrays marked with this decorator will also be validated.\n */\n\nfunction ValidateIf(condition, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.CONDITIONAL_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [condition],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.ValidateIf = ValidateIf; // -------------------------------------------------------------------------\n// Common checkers\n// -------------------------------------------------------------------------\n\n/**\n * Checks if given value is defined (!== undefined, !== null).\n */\n\nfunction IsDefined(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_DEFINED,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsDefined = IsDefined;\n/**\n * Checks if the value match (\"===\") the comparison.\n */\n\nfunction Equals(comparison, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.EQUALS,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [comparison],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.Equals = Equals;\n/**\n * Checks if the value does not match (\"!==\") the comparison.\n */\n\nfunction NotEquals(comparison, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.NOT_EQUALS,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [comparison],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.NotEquals = NotEquals;\n/**\n * Checks if given value is empty (=== '', === null, === undefined).\n */\n\nfunction IsEmpty(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_EMPTY,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsEmpty = IsEmpty;\n/**\n * Checks if given value is not empty (!== '', !== null, !== undefined).\n */\n\nfunction IsNotEmpty(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_NOT_EMPTY,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsNotEmpty = IsNotEmpty;\n/**\n * Checks if value is in a array of allowed values.\n */\n\nfunction IsIn(values, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_IN,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [values],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsIn = IsIn;\n/**\n * Checks if value is not in a array of disallowed values.\n */\n\nfunction IsNotIn(values, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_NOT_IN,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [values],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsNotIn = IsNotIn;\n/**\n * Checks if value is missing and if so, ignores all validators.\n */\n\nfunction IsOptional(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.CONDITIONAL_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [function (object, value) {\n        return object[propertyName] !== null && object[propertyName] !== undefined;\n      }],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsOptional = IsOptional; // -------------------------------------------------------------------------\n// Type checkers\n// -------------------------------------------------------------------------\n\n/**\n * Checks if a value is a boolean.\n */\n\nfunction IsBoolean(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_BOOLEAN,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsBoolean = IsBoolean;\n/**\n * Checks if a value is a date.\n */\n\nfunction IsDate(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_DATE,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsDate = IsDate;\n/**\n * Checks if a value is a number.\n */\n\nfunction IsNumber(options, validationOptions) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_NUMBER,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [options],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsNumber = IsNumber;\n/**\n * Checks if the value is an integer number.\n */\n\nfunction IsInt(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_INT,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsInt = IsInt;\n/**\n * Checks if a value is a string.\n */\n\nfunction IsString(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_STRING,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsString = IsString;\n\nfunction IsDateString(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_DATE_STRING,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsDateString = IsDateString;\n/**\n * Checks if a value is an array.\n */\n\nfunction IsArray(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_ARRAY,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsArray = IsArray;\n/**\n * Checks if a value is a number enum.\n */\n\nfunction IsEnum(entity, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_ENUM,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [entity],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsEnum = IsEnum; // -------------------------------------------------------------------------\n// Number checkers\n// -------------------------------------------------------------------------\n\n/**\n * Checks if the value is a number that's divisible by another.\n */\n\nfunction IsDivisibleBy(num, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_DIVISIBLE_BY,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [num],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsDivisibleBy = IsDivisibleBy;\n/**\n * Checks if the value is a positive number.\n */\n\nfunction IsPositive(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_POSITIVE,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsPositive = IsPositive;\n/**\n * Checks if the value is a negative number.\n */\n\nfunction IsNegative(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_NEGATIVE,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsNegative = IsNegative;\n/**\n * Checks if the given number is greater than or equal to given number.\n */\n\nfunction Min(min, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.MIN,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [min],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.Min = Min;\n/**\n * Checks if the given number is less than or equal to given number.\n */\n\nfunction Max(max, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.MAX,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [max],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.Max = Max; // -------------------------------------------------------------------------\n// Date checkers\n// -------------------------------------------------------------------------\n\n/**\n * Checks if the value is a date that's after the specified date.\n */\n\nfunction MinDate(date, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.MIN_DATE,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [date],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.MinDate = MinDate;\n/**\n * Checks if the value is a date that's before the specified date.\n */\n\nfunction MaxDate(date, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.MAX_DATE,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [date],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.MaxDate = MaxDate; // -------------------------------------------------------------------------\n// String-as-types checkers\n// -------------------------------------------------------------------------\n\n/**\n * Checks if a string is a boolean.\n */\n\nfunction IsBooleanString(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_BOOLEAN_STRING,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsBooleanString = IsBooleanString;\n/**\n * Checks if the string is a number.\n */\n\nfunction IsNumberString(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_NUMBER_STRING,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsNumberString = IsNumberString; // -------------------------------------------------------------------------\n// String checkers\n// -------------------------------------------------------------------------\n\n/**\n * Checks if the string contains the seed.\n */\n\nfunction Contains(seed, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.CONTAINS,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [seed],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.Contains = Contains;\n/**\n * Checks if the string does not contain the seed.\n */\n\nfunction NotContains(seed, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.NOT_CONTAINS,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [seed],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.NotContains = NotContains;\n/**\n * Checks if the string contains only letters (a-zA-Z).\n */\n\nfunction IsAlpha(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_ALPHA,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsAlpha = IsAlpha;\n/**\n * Checks if the string contains only letters and numbers.\n */\n\nfunction IsAlphanumeric(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_ALPHANUMERIC,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsAlphanumeric = IsAlphanumeric;\n/**\n * Checks if the string contains ASCII chars only.\n */\n\nfunction IsAscii(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_ASCII,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsAscii = IsAscii;\n/**\n * Checks if a string is base64 encoded.\n */\n\nfunction IsBase64(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_BASE64,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsBase64 = IsBase64;\n/**\n * Checks if the string's length (in bytes) falls in a range.\n */\n\nfunction IsByteLength(min, max, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_BYTE_LENGTH,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [min, max],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsByteLength = IsByteLength;\n/**\n * Checks if the string is a credit card.\n */\n\nfunction IsCreditCard(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_CREDIT_CARD,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsCreditCard = IsCreditCard;\n/**\n * Checks if the string is a valid currency amount.\n */\n\nfunction IsCurrency(options, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_CURRENCY,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [options],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsCurrency = IsCurrency;\n/**\n * Checks if the string is an email.\n */\n\nfunction IsEmail(options, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_EMAIL,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [options],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsEmail = IsEmail;\n/**\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\n */\n\nfunction IsFQDN(options, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_FQDN,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [options],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsFQDN = IsFQDN;\n/**\n * Checks if the string contains any full-width chars.\n */\n\nfunction IsFullWidth(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_FULL_WIDTH,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsFullWidth = IsFullWidth;\n/**\n * Checks if the string contains any half-width chars.\n */\n\nfunction IsHalfWidth(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_HALF_WIDTH,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsHalfWidth = IsHalfWidth;\n/**\n * Checks if the string contains a mixture of full and half-width chars.\n */\n\nfunction IsVariableWidth(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_VARIABLE_WIDTH,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsVariableWidth = IsVariableWidth;\n/**\n * Checks if the string is a hexadecimal color.\n */\n\nfunction IsHexColor(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_HEX_COLOR,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsHexColor = IsHexColor;\n/**\n * Checks if the string is a hexadecimal number.\n */\n\nfunction IsHexadecimal(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_HEXADECIMAL,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsHexadecimal = IsHexadecimal;\n/**\n * Checks if the string is an IP (version 4 or 6).\n */\n\nfunction IsIP(version, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_IP,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [version],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsIP = IsIP;\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n */\n\nfunction IsISBN(version, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_ISBN,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [version],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsISBN = IsISBN;\n/**\n * Checks if the string is an ISIN (stock/security identifier).\n */\n\nfunction IsISIN(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_ISIN,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsISIN = IsISIN;\n/**\n * Checks if the string is a valid ISO 8601 date.\n */\n\nfunction IsISO8601(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_ISO8601,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsISO8601 = IsISO8601;\n/**\n * Checks if the string is valid JSON (note: uses JSON.parse).\n */\n\nfunction IsJSON(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_JSON,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsJSON = IsJSON;\n/**\n * Checks if the string is lowercase.\n */\n\nfunction IsLowercase(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_LOWERCASE,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsLowercase = IsLowercase;\n/**\n * Checks if the string is a mobile phone number (locale is one of ['zh-CN', 'zh-TW', 'en-ZA', 'en-AU', 'en-HK',\n * 'pt-PT', 'fr-FR', 'el-GR', 'en-GB', 'en-US', 'en-ZM', 'ru-RU', 'nb-NO', 'nn-NO', 'vi-VN', 'en-NZ']).\n */\n\nfunction IsMobilePhone(locale, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_MOBILE_PHONE,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [locale],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsMobilePhone = IsMobilePhone;\n/**\n * Checks if the string is a valid phone number.\n * @param {string} region 2 characters uppercase country code (e.g. DE, US, CH).\n * If users must enter the intl. prefix (e.g. +41), then you may pass \"ZZ\" or null as region.\n * See [google-libphonenumber, metadata.js:countryCodeToRegionCodeMap on github]{@link https://github.com/ruimarinho/google-libphonenumber/blob/1e46138878cff479aafe2ce62175c6c49cb58720/src/metadata.js#L33}\n */\n\nfunction IsPhoneNumber(region, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_PHONE_NUMBER,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [region],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsPhoneNumber = IsPhoneNumber;\n/**\n * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.\n */\n\nfunction IsMongoId(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_MONGO_ID,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsMongoId = IsMongoId;\n/**\n * Checks if the string contains one or more multibyte chars.\n */\n\nfunction IsMultibyte(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_MULTIBYTE,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsMultibyte = IsMultibyte;\n/**\n * Checks if the string contains any surrogate pairs chars.\n */\n\nfunction IsSurrogatePair(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_SURROGATE_PAIR,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsSurrogatePair = IsSurrogatePair;\n/**\n * Checks if the string is an url.\n */\n\nfunction IsUrl(options, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_URL,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [options],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsUrl = IsUrl;\n/**\n * Checks if the string is a UUID (version 3, 4 or 5).\n */\n\nfunction IsUUID(version, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_UUID,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [version],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsUUID = IsUUID;\n/**\n * Checks if the string is uppercase.\n */\n\nfunction IsUppercase(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_UPPERCASE,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsUppercase = IsUppercase;\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n */\n\nfunction Length(min, max, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.LENGTH,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [min, max],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.Length = Length;\n/**\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\n */\n\nfunction MinLength(min, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.MIN_LENGTH,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [min],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.MinLength = MinLength;\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n */\n\nfunction MaxLength(max, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.MAX_LENGTH,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [max],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.MaxLength = MaxLength;\n\nfunction Matches(pattern, modifiersOrAnnotationOptions, validationOptions) {\n  var modifiers;\n\n  if (modifiersOrAnnotationOptions && modifiersOrAnnotationOptions instanceof Object && !validationOptions) {\n    validationOptions = modifiersOrAnnotationOptions;\n  } else {\n    modifiers = modifiersOrAnnotationOptions;\n  }\n\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.MATCHES,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [pattern, modifiers],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.Matches = Matches;\n/**\n * Checks if the string correctly represents a time in the format HH:MM\n */\n\nfunction IsMilitaryTime(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_MILITARY_TIME,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsMilitaryTime = IsMilitaryTime; // -------------------------------------------------------------------------\n// Array checkers\n// -------------------------------------------------------------------------\n\n/**\n * Checks if array contains all values from the given array of values.\n */\n\nfunction ArrayContains(values, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.ARRAY_CONTAINS,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [values],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.ArrayContains = ArrayContains;\n/**\n * Checks if array does not contain any of the given values.\n */\n\nfunction ArrayNotContains(values, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.ARRAY_NOT_CONTAINS,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [values],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.ArrayNotContains = ArrayNotContains;\n/**\n * Checks if given array is not empty.\n */\n\nfunction ArrayNotEmpty(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.ARRAY_NOT_EMPTY,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.ArrayNotEmpty = ArrayNotEmpty;\n/**\n * Checks if array's length is as minimal this number.\n */\n\nfunction ArrayMinSize(min, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.ARRAY_MIN_SIZE,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [min],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.ArrayMinSize = ArrayMinSize;\n/**\n * Checks if array's length is as maximal this number.\n */\n\nfunction ArrayMaxSize(max, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.ARRAY_MAX_SIZE,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [max],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.ArrayMaxSize = ArrayMaxSize;\n/**\n * Checks if all array's values are unique. Comparison for objects is reference-based.\n */\n\nfunction ArrayUnique(validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.ARRAY_UNIQUE,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.ArrayUnique = ArrayUnique;\n/**\n * Checks if all array's values are unique. Comparison for objects is reference-based.\n */\n\nfunction IsInstance(targetType, validationOptions) {\n  return function (object, propertyName) {\n    var args = {\n      type: ValidationTypes_1.ValidationTypes.IS_INSTANCE,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [targetType],\n      validationOptions: validationOptions\n    };\n    container_1.getFromContainer(MetadataStorage_1.MetadataStorage).addValidationMetadata(new ValidationMetadata_1.ValidationMetadata(args));\n  };\n}\n\nexports.IsInstance = IsInstance; //# sourceMappingURL=decorators.js.map","map":null,"metadata":{},"sourceType":"script"}